name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

# Concurrency control: one Claude instance per issue/PR
concurrency:
  group: claude-${{ github.event.issue.number || github.event.pull_request.number }}
  cancel-in-progress: false  # Don't cancel in-progress Claude responses

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Prevent long-running jobs
    environment:
      name: claude-interactions  # Optional: require manual approval for sensitive repos
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate Claude Invocation
        id: validate
        uses: actions/github-script@v7
        with:
          script: |
            // Check for potential abuse patterns
            const body = context.payload.comment?.body || 
                         context.payload.review?.body || 
                         context.payload.issue?.body || '';
            
            // Rate limit check (example: max 10 Claude calls per hour per user)
            const user = context.payload.sender.login;
            console.log(`Claude invoked by: ${user}`);
            
            // Check if user is a collaborator (optional security)
            if (context.payload.repository.private) {
              try {
                await github.rest.repos.checkCollaborator({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  username: user
                });
              } catch (error) {
                core.setFailed('Only collaborators can invoke Claude on private repos');
              }
            }

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        continue-on-error: true  # Handle failures gracefully
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Add context about project requirements
          prompt_prefix: |
            Important: Follow the guidelines in CLAUDE.md. 
            Focus on: Security/PII, i18n (fr/nl/en), performance, tests, MVP0 DoD alignment.
            Be concise and actionable.

          # Optional: Add claude_args to customize behavior and configuration
          # Restrict tools for safety
          claude_args: '--allowed-tools "Bash(gh issue:*),Bash(gh pr:*),Bash(gh search:*),Read,Grep,Glob"'

      - name: Handle Claude Failure
        if: steps.claude.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || context.payload.pull_request?.number;
            if (issueNumber) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '⚠️ Claude failed to respond. Please try again or contact maintainers.'
              });
            }

